package view;

import javax.swing.*;
import java.sql.*;
import java.text.ParseException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import projectman.DBConnection;


public class ManageProject_Form extends JFrame {

    private String selectedProjectId;
    private DefaultTableModel model;
    private Connection conn;
    private int selectedProjectIndex = -1; 

    public ManageProject_Form() {
        initComponents();
        connectToDatabase();
        loadProjects();
    }

    private void connectToDatabase() {
    try {
        conn = DBConnection.getConnection();
        System.out.println("Connected to the database successfully!");
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Database Connection Failed: " + e.getMessage());
    }
}


    private void loadProjects() {
        model = (DefaultTableModel) MemberField.getModel();
        
        String sql = "SELECT s.RegNo, p.ProjectId, p.Title, s.Category, s.Year, sup.Name AS Supervisor, p.SupId, s.Member, p.StartDate, p.Deadline, "
                + "CASE WHEN CURDATE() < p.StartDate THEN 'Not Started' "
                + "WHEN CURDATE() > p.Deadline THEN 'Completed' "
                + "ELSE 'In Progress' END AS Status "
                + "FROM project p "
                + "JOIN student s ON p.ProjectId = s.ProjectId "
                + "LEFT JOIN supervisor sup ON p.SupId = sup.SupId";

        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            model.setRowCount(0); 
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("RegNo"),
                    rs.getInt("ProjectId"),
                    rs.getString("Title"),
                    rs.getString("Category"),
                    rs.getInt("Year"),
                    rs.getString("Supervisor"),
                    rs.getInt("SupId"),
                    rs.getString("Member"),
                    rs.getDate("StartDate"),
                    rs.getDate("Deadline"),
                    rs.getString("Status")
                });
            }
            model.fireTableDataChanged(); 
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to Load Projects: " + e.getMessage());
        }
    }

    private java.sql.Date parseDate(String dateStr) {
        try {
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
            java.util.Date date = sdf.parse(dateStr);
            return new java.sql.Date(date.getTime());
        } catch (java.text.ParseException e) {
            e.printStackTrace();
            return null;
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        MemberField = new javax.swing.JTable();
        buttonPanel = new javax.swing.JPanel();
        updateProjectButton = new javax.swing.JButton();
        deleteProjectButton = new javax.swing.JButton();
        searchProjectButton = new javax.swing.JButton();
        projectFormPanel = new javax.swing.JPanel();
        titleField = new javax.swing.JLabel();
        supervisorField = new javax.swing.JLabel();
        memberField = new javax.swing.JLabel();
        yearField = new javax.swing.JLabel();
        regNoField = new javax.swing.JLabel();
        txtCategory = new javax.swing.JComboBox<>();
        categoryField = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        txtSupervisor = new javax.swing.JTextField();
        txtMember = new javax.swing.JTextField();
        txtYear = new javax.swing.JTextField();
        txtRegNo = new javax.swing.JTextField();
        startDateField = new javax.swing.JLabel();
        DeadlineField = new javax.swing.JLabel();
        txtStartDate = new javax.swing.JTextField();
        txtDeadline = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        addProjectButton = new javax.swing.JButton();
        editProjectButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MemberField.setBackground(new java.awt.Color(244, 236, 228));
        MemberField.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "RegNo", "ProjectId", "Title", "Category", "Year", "Supervisor", "SupId", "Member", "StartDate", "Deadline", "Status"
            }
        ));
        jScrollPane1.setViewportView(MemberField);

        updateProjectButton.setText("Update Project");
        updateProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateProjectButtonActionPerformed(evt);
            }
        });

        deleteProjectButton.setText("Delete Project");
        deleteProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProjectButtonActionPerformed(evt);
            }
        });

        searchProjectButton.setText("Search Project");
        searchProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchProjectButtonActionPerformed(evt);
            }
        });

        titleField.setText("Title:");

        supervisorField.setText("Supervisor:");

        memberField.setText("Member:");

        yearField.setText("Year");

        regNoField.setText("Reg.No");

        txtCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CIS", "BRP", "Internship" }));

        categoryField.setText("Category");

        txtRegNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRegNoActionPerformed(evt);
            }
        });

        startDateField.setText("StartDate:");

        DeadlineField.setText("Deadline:");

        txtStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStartDateActionPerformed(evt);
            }
        });

        txtDeadline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDeadlineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout projectFormPanelLayout = new javax.swing.GroupLayout(projectFormPanel);
        projectFormPanel.setLayout(projectFormPanelLayout);
        projectFormPanelLayout.setHorizontalGroup(
            projectFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(projectFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(projectFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(projectFormPanelLayout.createSequentialGroup()
                            .addComponent(memberField)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtMember))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, projectFormPanelLayout.createSequentialGroup()
                            .addComponent(titleField)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtTitle))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, projectFormPanelLayout.createSequentialGroup()
                            .addComponent(supervisorField)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtSupervisor, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(projectFormPanelLayout.createSequentialGroup()
                        .addComponent(yearField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(categoryField)
                        .addGap(18, 18, 18)
                        .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(projectFormPanelLayout.createSequentialGroup()
                        .addComponent(regNoField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtRegNo, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(projectFormPanelLayout.createSequentialGroup()
                        .addComponent(startDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(projectFormPanelLayout.createSequentialGroup()
                        .addComponent(DeadlineField)
                        .addGap(18, 18, 18)
                        .addComponent(txtDeadline, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        projectFormPanelLayout.setVerticalGroup(
            projectFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectFormPanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(projectFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleField)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(projectFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supervisorField)
                    .addComponent(txtSupervisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(projectFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memberField)
                    .addComponent(txtMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(projectFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearField)
                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryField)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(projectFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regNoField)
                    .addComponent(txtRegNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(projectFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startDateField)
                    .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(projectFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeadlineField)
                    .addComponent(txtDeadline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jLabel1.setBackground(new java.awt.Color(93, 117, 153));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(93, 117, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Projects");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        addProjectButton.setText("Add Project");
        addProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProjectButtonActionPerformed(evt);
            }
        });

        editProjectButton.setText("Edit Project");
        editProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProjectButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Go Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(projectFormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteProjectButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateProjectButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                            .addComponent(addProjectButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editProjectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchProjectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchProjectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addProjectButton)
                        .addGap(18, 18, 18)
                        .addComponent(editProjectButton)
                        .addGap(18, 18, 18)
                        .addComponent(updateProjectButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteProjectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)
                        .addContainerGap())
                    .addComponent(projectFormPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>                        

    private void addProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 

        String title = txtTitle.getText().trim();
        String category = (String) txtCategory.getSelectedItem();
        String supervisorName = txtSupervisor.getText().trim();
        String member = txtMember.getText().trim();
        String startDateStr = txtStartDate.getText().trim();
        String deadlineStr = txtDeadline.getText().trim();
        String regNo = txtRegNo.getText().trim();
        String year = txtYear.getText().trim();

        // Parse dates
        java.sql.Date startDate = parseDate(startDateStr);
        java.sql.Date deadline = parseDate(deadlineStr);

        // Validate dates
        if (startDate == null || deadline == null) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Use YYYY-MM-DD.");
            return;
        }

        // Check for duplicate title
        if (isTitleDuplicate(title)) {
            JOptionPane.showMessageDialog(this, "A project with this title already exists!");
            return;
        }

        // Get or create supervisor ID
        int supId = getOrCreateSupervisorId(supervisorName);
        if (supId == -1) {
            return; 
        }
        try {
            // Inserts project into the project table
            String insertProjectSQL = "INSERT INTO project (Title, SupId, StartDate, Deadline, Status) VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(insertProjectSQL, Statement.RETURN_GENERATED_KEYS)) {
                pstmt.setString(1, title);
                pstmt.setInt(2, supId);
                pstmt.setDate(3, startDate);
                pstmt.setDate(4, deadline);
                pstmt.setString(5, calculateStatus(startDate, deadline));
                pstmt.executeUpdate();

                // Get auto-generated ProjectId
                ResultSet rs = pstmt.getGeneratedKeys();
                int projectId = -1;
                if (rs.next()) {
                    projectId = rs.getInt(1);
                }

                // Insert student details into the student table
                String insertStudentSQL = "INSERT INTO student (RegNo, Category, Year, Member, ProjectId, SupId) VALUES (?, ?, ?, ?, ?, ?)";
                try (PreparedStatement studentStmt = conn.prepareStatement(insertStudentSQL)) {
                    studentStmt.setString(1, regNo);
                    studentStmt.setString(2, category); // Include Category here
                    studentStmt.setString(3, year);
                    studentStmt.setString(4, member);
                    studentStmt.setInt(5, projectId);
                    studentStmt.setInt(6, supId);
                    studentStmt.executeUpdate();
                }

                // Success message
                JOptionPane.showMessageDialog(this, "Project Added Successfully!");

                // Refresh project list and clear form
                loadProjects();
                clearFormFields();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to add project: " + e.getMessage());
        }
    }

    private int getOrCreateSupervisorId(String supervisorName) {
        int supId = -1;

        try {
            
            String checkSupervisorSQL = "SELECT SupId FROM supervisor WHERE Name = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(checkSupervisorSQL)) {
                pstmt.setString(1, supervisorName);
                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    supId = rs.getInt("SupId");
                } else {
                    
                    String insertSupervisorSQL = "INSERT INTO supervisor (Name) VALUES (?)";
                    try (PreparedStatement insertPstmt = conn.prepareStatement(insertSupervisorSQL, Statement.RETURN_GENERATED_KEYS)) {
                        insertPstmt.setString(1, supervisorName);
                        insertPstmt.executeUpdate();

                        
                        ResultSet insertRs = insertPstmt.getGeneratedKeys();
                        if (insertRs.next()) {
                            supId = insertRs.getInt(1);
                        }
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to get or create supervisor: " + e.getMessage());
        }

        return supId;
    }

    private int getOrCreateProjectId(String title, java.sql.Date startDate, java.sql.Date deadline) {
        int projectId = -1;
        String selectProjectSQL = "SELECT ProjectId FROM project WHERE Title = ? AND StartDate = ? AND Deadline = ?";

        try (PreparedStatement pstmt = conn.prepareStatement(selectProjectSQL)) {
            pstmt.setString(1, title);
            pstmt.setDate(2, startDate);
            pstmt.setDate(3, deadline);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                
                projectId = rs.getInt("ProjectId");
            } else {
                
                String insertProjectSQL = "INSERT INTO project (Title, StartDate, Deadline) VALUES (?, ?, ?)";
                try (PreparedStatement insertPstmt = conn.prepareStatement(insertProjectSQL, Statement.RETURN_GENERATED_KEYS)) {
                    insertPstmt.setString(1, title);
                    insertPstmt.setDate(2, startDate);
                    insertPstmt.setDate(3, deadline);
                    insertPstmt.executeUpdate();

                    
                    ResultSet generatedKeys = insertPstmt.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        projectId = generatedKeys.getInt(1);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            
        }

        return projectId;
    }

    private boolean isTitleDuplicate(String title) {
        String query = "SELECT COUNT(*) FROM project WHERE Title = ?";
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, title);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next() && rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private String calculateStatus(java.sql.Date startDate, java.sql.Date deadline) {
        java.util.Date today = new java.util.Date();
        if (today.before(startDate)) {
            return "Not Started";
        } else if (today.after(deadline)) {
            return "Completed";
        } else {
            return "In Progress";
        }

    }                                                
    
    private void refreshUI() {
    
    DefaultTableModel model = (DefaultTableModel) MemberField.getModel();
    model.setRowCount(0); // Removes all rows

    
    String selectSQL = "SELECT s.RegNo, p.ProjectId, p.Title, s.Category, s.Year, sup.Name AS Supervisor, p.SupId, s.Member, p.StartDate, p.Deadline, "
            + "CASE WHEN CURDATE() < p.StartDate THEN 'Not Started' "
            + "WHEN CURDATE() > p.Deadline THEN 'Completed' "
            + "ELSE 'In Progress' END AS Status "
            + "FROM project p "
            + "JOIN student s ON p.ProjectId = s.ProjectId "
            + "LEFT JOIN supervisor sup ON p.SupId = sup.SupId";

    try (Connection conn = DBConnection.getConnection(); 
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(selectSQL)) {

        // Populate tables
        while (rs.next()) {
            Object[] row = new Object[]{
                rs.getString("RegNo"),      
                rs.getInt("ProjectId"),
                rs.getString("Title"),
                rs.getString("Category"),
                rs.getInt("Year"),
                rs.getString("Supervisor"),
                rs.getInt("SupId"),
                rs.getString("Member"),
                rs.getDate("StartDate"),
                rs.getDate("Deadline"),
                rs.getString("Status")
            };
            model.addRow(row);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error refreshing data.");
    }
}

private boolean doesProjectExist(int projectId) {
    String checkSQL = "SELECT COUNT(*) FROM project WHERE ProjectId = ?";
    try (PreparedStatement pstmt = conn.prepareStatement(checkSQL)) {
        pstmt.setInt(1, projectId);
        try (ResultSet rs = pstmt.executeQuery()) {
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return false;
}

    private void updateProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    

    String regNo = txtRegNo.getText();
    String title = txtTitle.getText();
    String year = txtYear.getText();
    String category = txtCategory.getSelectedItem().toString();
    String supervisorName = txtSupervisor.getText();
    String member = txtMember.getText();
    String startDate = txtStartDate.getText();
    String deadline = txtDeadline.getText();

    if (regNo.isEmpty() || title.isEmpty() || year.isEmpty() || supervisorName.isEmpty() || member.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all fields before updating.");
        return;
    }

    String status = calculateStatus(java.sql.Date.valueOf(startDate), java.sql.Date.valueOf(deadline));
    int supId = getOrCreateSupervisorId(supervisorName);

    int projectId = -1;
    if (selectedProjectIndex >= 0) {
        Object projectIdObj = MemberField.getValueAt(selectedProjectIndex, 1);
        if (projectIdObj != null) {
            try {
                projectId = Integer.parseInt(projectIdObj.toString());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid ProjectId format.");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "No valid ProjectId found.");
            return;
        }
    } else {
        JOptionPane.showMessageDialog(this, "No project selected.");
        return;
    }

    if (!doesProjectExist(projectId)) {
        JOptionPane.showMessageDialog(this, "ProjectId does not exist.");
        return;
    }

  
    System.out.println("Updating Project ID: " + projectId);
    System.out.println("New Title: " + title);
    System.out.println("New Supervisor ID: " + supId);
    System.out.println("Start Date: " + startDate);
    System.out.println("Deadline: " + deadline);
    System.out.println("Status: " + status);

    try (Connection conn = DBConnection.getConnection(); 
         PreparedStatement updateProjectStmt = conn.prepareStatement(
            "UPDATE project SET Title = ?, SupId = ?, StartDate = ?, Deadline = ?, status = ? WHERE ProjectId = ?");
         PreparedStatement updateStudentStmt = conn.prepareStatement(
            "UPDATE student SET Year = ?, Member = ?, SupId = ?, Category = ? WHERE RegNo = ?")) {

        
        System.out.println("SQL Query for Project Update: "
            + "UPDATE project SET Title = '" + title + "', SupId = " + supId 
            + ", StartDate = '" + startDate + "', Deadline = '" + deadline 
            + "', status = '" + status + "' WHERE ProjectId = " + projectId);
        System.out.println("SQL Query for Student Update: "
            + "UPDATE student SET Year = " + year + ", Member = '" + member 
            + "', SupId = " + supId + ", Category = '" + category 
            + "' WHERE RegNo = '" + regNo + "'");

        updateProjectStmt.setString(1, title);
        updateProjectStmt.setInt(2, supId);
        updateProjectStmt.setDate(3, java.sql.Date.valueOf(startDate));
        updateProjectStmt.setDate(4, java.sql.Date.valueOf(deadline));
        updateProjectStmt.setString(5, status);
        updateProjectStmt.setInt(6, projectId);

        int projectRowsAffected = updateProjectStmt.executeUpdate();
        System.out.println("Project Rows Affected: " + projectRowsAffected);

        updateStudentStmt.setInt(1, Integer.parseInt(year));
        updateStudentStmt.setString(2, member);
        updateStudentStmt.setInt(3, supId);
        updateStudentStmt.setString(4, category);
        updateStudentStmt.setString(5, regNo);

        int studentRowsAffected = updateStudentStmt.executeUpdate();
        System.out.println("Student Rows Affected: " + studentRowsAffected);

        if (projectRowsAffected > 0 && studentRowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Project updated successfully!");
            loadProjects(); 
        } else {
            JOptionPane.showMessageDialog(this, "No changes were made.");
        }
    } catch (SQLException e) {
        System.out.println("SQLException occurred:");
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Failed to update project: " + e.getMessage());
    }

    }                                                   

    private void clearFormFields() {
        txtTitle.setText("");
        txtCategory.setSelectedIndex(0);
        txtSupervisor.setText("");
        txtMember.setText("");
        txtStartDate.setText("");
        txtDeadline.setText("");
        txtRegNo.setText("");
        txtYear.setText("");
    }


    private void deleteProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    

        
        int selectedRow = MemberField.getSelectedRow();

        if (selectedRow == -1) {
           
            JOptionPane.showMessageDialog(this, "Please select a project to delete.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

     
        Object projectIdObj = MemberField.getValueAt(selectedRow, 1);

        Integer projectId;
        if (projectIdObj instanceof Integer) {
            projectId = (Integer) projectIdObj;
        } else {
            try {
                projectId = Integer.parseInt(projectIdObj.toString());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid Project ID format.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

       
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this project?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            Connection conn = null;
            PreparedStatement pstmt = null;
            try {
            
            conn = DBConnection.getConnection();

            
            conn.setAutoCommit(false);

            
            String deleteStudentsSql = "DELETE FROM student WHERE ProjectId = ?";
            pstmt = conn.prepareStatement(deleteStudentsSql);
            pstmt.setInt(1, projectId);
            pstmt.executeUpdate();

            
            String deleteProjectSql = "DELETE FROM project WHERE ProjectId = ?";
            pstmt = conn.prepareStatement(deleteProjectSql);
            pstmt.setInt(1, projectId);

            
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
              
                JOptionPane.showMessageDialog(this, "Project deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

            } else {
                JOptionPane.showMessageDialog(this, "No project found with the specified ID.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            conn.commit();
        } catch (SQLException e) {
          
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException rollbackEx) {
                    rollbackEx.printStackTrace();
                }
            }
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while deleting the project.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
                loadProjects();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
                               

    }                                                   

    private String calculateStatus(String startDateStr, String deadlineStr) {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date startDate = sdf.parse(startDateStr);
            Date deadline = sdf.parse(deadlineStr);
            Date today = new Date();
            if (today.before(startDate)) {
                return "Not Started";
            } else if (today.after(deadline)) {
                return "Completed";
            } else {
                return "In Progress";
            }
        } catch (ParseException e) {
            e.printStackTrace();
            return "Unknown";
        }
    }
    private void searchProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    

        String title = txtTitle.getText().trim();
        String regNo = txtRegNo.getText().trim();
        String supervisorName = txtSupervisor.getText().trim();
        String selectedCategory = (String) txtCategory.getSelectedItem(); 
        // Prepare SQL query
        String sql = "SELECT p.ProjectId, p.Title, p.StartDate, p.Deadline, p.status, s.RegNo, s.Member, s.Year, s.Category, sv.Name "
                + "FROM project p "
                + "LEFT JOIN student s ON p.ProjectId = s.ProjectId "
                + "LEFT JOIN supervisor sv ON p.SupId = sv.SupId "
                + "WHERE (p.Title LIKE ?) "
                + "AND (s.RegNo LIKE ?) "
                + "AND (sv.Name LIKE ?) "
                + "AND (s.Category LIKE ?)";

        try (Connection conn = DBConnection.getConnection();  PreparedStatement pst = conn.prepareStatement(sql)) {

           
            pst.setString(1, "%" + title + "%");
            pst.setString(2, "%" + regNo + "%");
            pst.setString(3, "%" + supervisorName + "%");
            pst.setString(4, selectedCategory != null ? "%" + selectedCategory + "%" : "%"); 

            ResultSet rs = pst.executeQuery();

            
            DefaultTableModel model = (DefaultTableModel) MemberField.getModel();
            model.setRowCount(0);

            
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("RegNo"),
                    rs.getInt("ProjectId"),
                    rs.getString("Title"),
                    rs.getString("Category"),
                    rs.getInt("Year"),
                    rs.getString("Name"), // Supervisor Name
                    rs.getString("Member"),
                    rs.getDate("StartDate"),
                    rs.getDate("Deadline"),
                    rs.getString("status")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }                                                   

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        txtRegNo.setText("");
        txtTitle.setText("");
        txtYear.setText("");
        txtCategory.setSelectedIndex(0);
        txtSupervisor.setText("");
        txtMember.setText("");
        txtStartDate.setText("");
        txtDeadline.setText("");

        JOptionPane.showMessageDialog(this, "Action Cancelled. Form Cleared.");


    }                                            


    private void editProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  

        int selectedRow = MemberField.getSelectedRow();
        if (selectedRow >= 0) {
 
            String regNo = MemberField.getValueAt(selectedRow, 0).toString();
            String title = MemberField.getValueAt(selectedRow, 2).toString();
            String category = MemberField.getValueAt(selectedRow, 3).toString();
            String supervisor = MemberField.getValueAt(selectedRow, 5).toString();
            String member = MemberField.getValueAt(selectedRow, 7).toString();

            
            String yearStr = MemberField.getValueAt(selectedRow, 4).toString();
            int year = 0;
            try {
                year = Integer.parseInt(yearStr);
            } catch (NumberFormatException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error parsing year.");
            }

            
            String startDateStr = MemberField.getValueAt(selectedRow, 8).toString();
            String deadlineStr = MemberField.getValueAt(selectedRow, 9).toString();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date startDate = null;
            Date deadline = null;

            try {
                
                if (!startDateStr.isEmpty()) {
                    startDate = dateFormat.parse(startDateStr);
                }
                if (!deadlineStr.isEmpty()) {
                    deadline = dateFormat.parse(deadlineStr);
                }
            } catch (ParseException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error parsing date.");
            }

           
            txtRegNo.setText(regNo);
            txtTitle.setText(title);

            
            boolean categoryExists = false;
            for (int i = 0; i < txtCategory.getItemCount(); i++) {
                if (txtCategory.getItemAt(i).equals(category)) {
                    txtCategory.setSelectedIndex(i);
                    categoryExists = true;
                    break;
                }
            }
            if (!categoryExists) {
                System.out.println("Category not found in JComboBox.");
            }

            txtSupervisor.setText(supervisor);
            txtMember.setText(member);
            txtYear.setText(Integer.toString(year)); 

            
            if (startDate != null) {
                txtStartDate.setText(dateFormat.format(startDate));
            }
            if (deadline != null) {
                txtDeadline.setText(dateFormat.format(deadline));
            }

            
            selectedProjectIndex = selectedRow;
        } else {
            JOptionPane.showMessageDialog(this, "No Project Selected to Edit!");
        }

    }                                                 

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        this.toBack();
        setVisible(false);
        new Admin_Form().toFront();
        new Admin_Form().setState(java.awt.Frame.NORMAL);

    }                                        

    private void txtRegNoActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void txtStartDateActionPerformed(java.awt.event.ActionEvent evt) {                                             
      
    }                                            

    private void txtDeadlineActionPerformed(java.awt.event.ActionEvent evt) {                                            
        
    }                                           


    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageProject_Form().setVisible(true);

            }
        });
    }


    // Variables declaration - do not modify                     
    private javax.swing.JLabel DeadlineField;
    private javax.swing.JTable MemberField;
    private javax.swing.JButton addProjectButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel categoryField;
    private javax.swing.JButton deleteProjectButton;
    private javax.swing.JButton editProjectButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel memberField;
    private javax.swing.JPanel projectFormPanel;
    private javax.swing.JLabel regNoField;
    private javax.swing.JButton searchProjectButton;
    private javax.swing.JLabel startDateField;
    private javax.swing.JLabel supervisorField;
    private javax.swing.JLabel titleField;
    private javax.swing.JComboBox<String> txtCategory;
    private javax.swing.JTextField txtDeadline;
    private javax.swing.JTextField txtMember;
    private javax.swing.JTextField txtRegNo;
    private javax.swing.JTextField txtStartDate;
    private javax.swing.JTextField txtSupervisor;
    private javax.swing.JTextField txtTitle;
    private javax.swing.JTextField txtYear;
    private javax.swing.JButton updateProjectButton;
    private javax.swing.JLabel yearField;
    // End of variables declaration                   

// Renamed custom driver manager class
    public class CustomDriverManager {

        // Placeholder method
        public static void doNothing() {
            System.out.println("CustomDriverManager is doing nothing.");
        }

        public static void main(String[] args) {
            // Example usage of the class
            doNothing();
        }
    }
}
